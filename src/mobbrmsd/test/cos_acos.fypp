#:set cos1_sqrt_part_x = [ &
&   "0.0000000000000000e+00", "1.0000000000000000e+00", &
& ]
#:set cos1_sqrt_part_w = [ &
&   "3.9847929621330180e-04", "2.7756772944468894e-03", "9.9787382004175255e-03", "3.2124745520119027e-02", "4.3277149578179819e-01", &
& ]
#:set cos1_x = [ &
&   ["-1.0000000000000000e+00", "-9.0236892706218241e-01",], &
&   ["-9.0236892706218241e-01", "-6.6666666666666663e-01",], &
&   ["-6.6666666666666663e-01", "-4.3096440627115074e-01",], &
&   ["-4.3096440627115074e-01", "-3.3333333333333331e-01",], &
& ]
#:set cos1_w = [ &
&   ["2.7150043732313152e-03", "8.0584699091552827e-03", "-3.0422013335204556e-04", "-6.9480186781926440e-02", "4.3616749888734951e-01",], &
&   ["-8.1880793225013100e-04", "-5.3682021468007667e-03", "-1.9427315377984092e-02", "-8.1580601406840383e-02", "4.3329732093336737e-01",], &
&   ["-1.3962794333934664e-03", "-6.7281227183138212e-03", "-2.0640121298405912e-02", "-8.2067600037457583e-02", "4.3322280904921723e-01",], &
&   ["1.1713621213896104e-02", "1.3560409301341475e-02", "-8.8387594483930760e-03", "-7.9004467646912643e-02", "4.3352276164963782e-01",], &
& ]
#:set cos2_x = [ &
&   ["-3.3333333333333331e-01", "-2.3570226039551581e-01",], &
&   ["-2.3570226039551581e-01", "2.0410779985789219e-17",], &
&   ["2.0410779985789219e-17", "2.3570226039551587e-01",], &
&   ["2.3570226039551587e-01", "3.3333333333333331e-01",], &
& ]
#:set cos2_w = [ &
&   ["6.3261501181342716e-01", "7.7758615573901924e-01", "2.7435256739631902e-01", "2.2752170341132330e-01", "8.7030281603695292e-01",], &
&   ["-5.1407513495624758e-02", "1.0016161738288792e-02", "-5.0149303892811525e-02", "1.6657415217801974e-01", "8.6602540378443871e-01",], &
&   ["9.3008662532715076e-03", "1.4372359674536180e-02", "-4.6656484877630987e-02", "1.6659959026260604e-01", "8.6602540378443871e-01",], &
&   ["-3.4902175486090642e-01", "4.1033381483828746e-01", "-2.1260486589396638e-01", "1.9761921280113542e-01", "8.6385435215153961e-01",], &
& ]
#:set cos3_x = [ &
&   ["3.3333333333333331e-01", "4.3096440627115085e-01",], &
&   ["4.3096440627115085e-01", "6.6666666666666663e-01",], &
&   ["6.6666666666666663e-01", "9.0236892706218252e-01",], &
&   ["9.0236892706218252e-01", "1.0000000000000000e+00",], &
& ]
#:set cos3_w = [ &
&   ["9.2989836420019442e-02", "-1.3124380721245635e-01", "3.9551533881730334e-02", "1.4461452858482687e-01", "8.6810669969142074e-01",], &
&   ["-6.7055964504391377e-03", "2.2911999129408750e-02", "-5.0039084385563551e-02", "1.6784857275128981e-01", "8.6583329929197761e-01",], &
&   ["-1.0881827591406440e-03", "9.1295179354582787e-03", "-3.7133080284270058e-02", "1.6236757221824985e-01", "8.6672538337508409e-01",], &
&   ["4.6017500027684044e-03", "-1.2962733889034270e-02", "-5.1111183599694618e-03", "1.4181596019335754e-01", "8.7165614205287767e-01",], &
& ]
#:set cosh_x = [ &
&   ["0.0000000000000000e+00", "1.4644660940672627e-01",], &
&   ["1.4644660940672627e-01", "5.0000000000000000e-01",], &
&   ["5.0000000000000000e-01", "8.5355339059327373e-01",], &
&   ["8.5355339059327373e-01", "1.0000000000000000e+00",], &
& ]
#:set cosh_w = [ &
&   ["2.9546700898745084e+00", "-6.8732996465706475e-01", "-1.3519484012953734e-02", "-4.6741735498024902e-03", "0.0000000000000000e+00",], &
&   ["-1.0623675833993933e-01", "1.5654255346132895e-01", "-9.6794886272540959e-02", "1.8177193622178180e-03", "-4.0727563438808847e-04",], &
&   ["2.3919197448076808e-02", "-5.9903084576736369e-02", "5.0794386881566130e-02", "-4.7880140922667278e-02", "6.4652937375348487e-03",], &
&   ["-1.3435433998222815e-01", "5.0040317286635916e-01", "-6.9989274807980062e-01", "4.0248132481808807e-01", "-9.5448197561904868e-02",], &
& ]
#:def p4(w, nest)
${" "*nest}$call p4_1((${w[0]}$_RK / (${w[2]}$_RK)), &
${" "*nest}$  &       (${w[1]}$_RK / (${w[3]}$_RK)), &
${" "*nest}$  &       ${w[2]}$_RK, &
${" "*nest}$  &       ${w[3]}$_RK, &
${" "*nest}$  &       ${w[4]}$_RK, &
${" "*nest}$  &       x, res)
#:enddef
#:def coef(w, nest)
${" "*nest}$a = ${cos1_sqrt_part_w[0]}$ * e + (${w[0]}$_RK)
${" "*nest}$b = ${cos1_sqrt_part_w[1]}$ * e + (${w[1]}$_RK)
${" "*nest}$c = ${cos1_sqrt_part_w[2]}$ * e + (${w[2]}$_RK)
${" "*nest}$d = ${cos1_sqrt_part_w[3]}$ * e + (${w[3]}$_RK)
${" "*nest}$e = ${cos1_sqrt_part_w[4]}$ * e + (${w[4]}$_RK)
#:enddef
#:def binary_search(x, w, f, nest)
#:if len(x)==2
${" "*nest}$if (x < ${x[0][1]}$_RK) then
${f(w[0], nest+2)}$
${" "*nest}$else
${f(w[1], nest+2)}$
${" "*nest}$endif
#:else
${" "*nest}$if (x < ${x[len(x)//2][0]}$_RK) then
${binary_search(x[:len(x)//2], w[:len(x)//2], f, nest+2)}$
${" "*nest}$else
${binary_search(x[len(x)//2:], w[len(x)//2:], f, nest+2)}$
${" "*nest}$endif
#:endif
#:enddef
  pure elemental function cos_acos(x) result(res)
    real(RK), intent(in) :: x
    real(RK)             :: res, yy, df
    if (x < -1.0000000000000000E+00_RK) then
      res = 1.0000000000000000E+00_RK / 2.0000000000000000E+00_RK
      return
    elseif (x < -0.3333333333333333E+00_RK) then
      block
        real(RK) :: a, b, c, d, e
        e = sqrt(x + ONE)
${binary_search(cos1_x, cos1_w, coef, 8)}$
        call p4_0(a, b, c, d, e, x, res)
      end block
    elseif (x < 0.3333333333333333E+00) then
${binary_search(cos2_x, cos2_w, p4, 6)}$
    elseif (x <= 1.0000000000000000E+00_RK) then
${binary_search(cos3_x, cos3_w, p4, 6)}$
    else
      res = cosh_acosh(ONE / x)
      return
    end if
    yy = res * res
    df = 12.0_RK * yy - 3.0_RK
    if (ABS(df) < 1E-18_RK) return
    df = ((4.0_RK * yy - 3.0_RK) * res - x) / df
    res = res - df
  end function cos_acos
!
  pure elemental function cosh_acosh(x) result(res)
    real(RK), intent(in) :: x
    real(RK)             :: res, yy, df
    if (x < ZERO) then
      res = ONE
      return
    elseif (x > ONE) then
      res = cos_acos(ONE / x)
      return
    else
${binary_search(cosh_x, cosh_w, p4, 6)}$
    end if
    yy = 4.0_RK * x
    res = res + invcbrt(yy) + x * invcbrt(yy * yy)
    yy = res * res
    df = 12.0_RK * yy - 3.0_RK
    if (ABS(df) < 1E-18_RK) return
    df = ((4.0_RK * yy - 3.0_RK) * res - ONE / x) / df
    res = res - df
  end function cosh_acosh
!
  pure elemental function sinh_asinh(x) result(res)
    real(RK), intent(in) :: x
    real(RK)             :: res, yy
    yy = x * x
    if (yy < 1.69_RK) then ! 1.3^2
      res = x * (1.0_RK / 3.0_RK) - x * yy * (4.0_RK / 81.0_RK)
    else
      res = x * invcbrt(4.0_RK * yy) - invcbrt(16.0_RK * x)
    end if
    yy = res * res
    res = res - ((4.0_RK * yy + 3.0_RK) * res - x) / (12.0_RK * yy + 3.0_RK)
    yy = res * res
    res = res - ((4.0_RK * yy + 3.0_RK) * res - x) / (12.0_RK * yy + 3.0_RK)
    yy = res * res
    res = res - ((4.0_RK * yy + 3.0_RK) * res - x) / (12.0_RK * yy + 3.0_RK)
  end function sinh_asinh
!
  pure elemental subroutine p4_0(a, b, c, d, e, x, res)
    real(RK), intent(in)    :: a, b, c, d, e, x
    real(RK), intent(inout) :: res
    real(RK)                :: xx
    xx = x * x
    res = a * xx * xx + b * x * xx + c * xx + d * x + e
  end subroutine p4_0
!
  pure elemental subroutine p4_1(a, b, c, d, e, x, res)
    real(RK), intent(in)    :: a, b, c, d, e, x
    real(RK), intent(inout) :: res
    real(RK)                :: xx
    xx = x * x
    res = c * xx * (a * xx + ONE) + d * x * (b * xx + ONE) + e
  end subroutine p4_1
!
#include "invcbrt.f90"
